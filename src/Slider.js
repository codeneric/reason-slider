// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Bowser = require("bowser");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Combokeys = require("combokeys");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactMotion = require("react-motion");
var ReactPortal = require("react-portal");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Motion$ReasonSlider = require("./utils/Motion.js");

var Default = /* module */[];

(((function() {
  var throttle = function(type, name, obj) {
      obj = obj || window;
      var running = false;
      var func = function() {
          if (running) { return; }
          running = true;
           requestAnimationFrame(function() {
              obj.dispatchEvent(new CustomEvent(name));
              running = false;
          });
      };
      obj.addEventListener(type, func);
  };

  /* init - you can init any event */
  throttle('resize', 'optimizedResize');
})()));

function Make(M) {
  var getTargetInnerHeight = function (target) {
    if (target !== undefined) {
      return Caml_option.valFromOption(target).getBoundingClientRect().height;
    } else {
      return window.innerHeight;
    }
  };
  var getTargetInnerWidth = function (target) {
    if (target !== undefined) {
      return Caml_option.valFromOption(target).getBoundingClientRect().width;
    } else {
      return window.innerWidth;
    }
  };
  var getScreenCenter = function (target) {
    var w = getTargetInnerWidth(target);
    var h = getTargetInnerHeight(target);
    return /* tuple */[
            w / 2 | 0,
            h / 2 | 0
          ];
  };
  var getElementOffset = function (param, target) {
    var match = getScreenCenter(target);
    return /* tuple */[
            match[0] - (param[0] / 2 | 0) | 0,
            match[1] - (param[1] / 2 | 0) | 0
          ];
  };
  var calculateFullscreenImageDimensions = function (param, target) {
    var originalY = param[1];
    var originalX = param[0];
    var widthConstraint = Caml_primitive.caml_int_min(originalX, getTargetInnerWidth(target));
    var heightConstraint = Caml_primitive.caml_int_min(originalY, getTargetInnerHeight(target));
    var scale = Caml_primitive.caml_float_min(widthConstraint / originalX, heightConstraint / originalY);
    return /* tuple */[
            originalX * scale | 0,
            originalY * scale | 0
          ];
  };
  var getDimension = function (element) {
    var rect = element.getBoundingClientRect();
    return /* tuple */[
            rect.top,
            rect.left,
            rect.width,
            rect.height
          ];
  };
  var precisionRound = function ($$float, precision) {
    var factor = Math.pow(10, precision);
    return Math.round($$float * factor) / factor;
  };
  var Calculations = /* module */[
    /* getTargetInnerHeight */getTargetInnerHeight,
    /* getTargetInnerWidth */getTargetInnerWidth,
    /* getScreenCenter */getScreenCenter,
    /* getElementOffset */getElementOffset,
    /* calculateFullscreenImageDimensions */calculateFullscreenImageDimensions,
    /* getDimension */getDimension,
    /* precisionRound */precisionRound
  ];
  var maybeExecute = function (optionFn, args) {
    if (optionFn !== undefined) {
      return Curry._1(optionFn, args);
    } else {
      return /* () */0;
    }
  };
  var maybeBool = function (b) {
    if (b == null) {
      return false;
    } else {
      return b;
    }
  };
  var indexFromPointer = function (items, pointer) {
    return $$Array.of_list(items).findIndex((function (item, i) {
                  return pointer === Curry._2(M[/* getPointer */1], item, i);
                }));
  };
  var pointerFromIndex = function (items, i) {
    return Curry._2(M[/* getPointer */1], List.nth(items, i), i);
  };
  var nextPointer = function (pointer, items) {
    var index = indexFromPointer(items, pointer);
    return pointerFromIndex(items, index + 1 | 0);
  };
  var previousPointer = function (pointer, items) {
    var index = indexFromPointer(items, pointer);
    return pointerFromIndex(items, index - 1 | 0);
  };
  var isPointerFirstEntry = function (pointer, items) {
    return indexFromPointer(items, pointer) === 0;
  };
  var isPointerLastEntry = function (pointer, items) {
    return indexFromPointer(items, pointer) === (List.length(items) - 1 | 0);
  };
  console.log(Bowser);
  var isDesktop = function (param) {
    if (maybeBool(Bowser.mobile)) {
      return false;
    } else {
      return !maybeBool(Bowser.tablet);
    }
  };
  console.log(ReactPortal.Portal);
  var make = function (children) {
    return ReasonReact.wrapJsForReason(ReactPortal.Portal, { }, children);
  };
  var Portal = /* module */[/* make */make];
  var component = ReasonReact.reducerComponent("Slider");
  var onResizeHandle = function (param, param$1) {
    var match = param[/* state */1][/* isOpen */0];
    if (match) {
      return Curry._1(param[/* send */3], /* Update */1);
    } else {
      return /* () */0;
    }
  };
  var renderPropsToJs = function (param) {
    return {
            show: param[/* show */0],
            close: param[/* close */1]
          };
  };
  var renderPropsFromJs = function (param) {
    return /* record */[
            /* show */param.show,
            /* close */param.close
          ];
  };
  var tToJs = function (param) {
    return {
            progress: param[/* progress */0],
            item: param[/* item */1],
            close: param[/* close */2]
          };
  };
  var tFromJs = function (param) {
    return /* record */[
            /* progress */param.progress,
            /* item */param.item,
            /* close */param.close
          ];
  };
  var RenderSlideProps = /* module */[
    /* tToJs */tToJs,
    /* tFromJs */tFromJs
  ];
  var tToJs$1 = function (param) {
    return {
            pointer: param[/* pointer */0],
            items: param[/* items */1],
            index: param[/* index */2]
          };
  };
  var tFromJs$1 = function (param) {
    return /* record */[
            /* pointer */param.pointer,
            /* items */param.items,
            /* index */param.index
          ];
  };
  var OnChange = /* module */[
    /* tToJs */tToJs$1,
    /* tFromJs */tFromJs$1
  ];
  var combokeys = /* record */[/* contents */undefined];
  var getCombokeys = function (param) {
    var match = combokeys[0];
    if (match !== undefined) {
      return Caml_option.valFromOption(match);
    } else {
      var ck = new Combokeys(document.documentElement);
      combokeys[0] = Caml_option.some(ck);
      return ck;
    }
  };
  var bindShortcuts = function (param) {
    var send = param[/* send */3];
    var c = getCombokeys(/* () */0);
    c.bind("esc", (function (param) {
            return Curry._1(send, /* Close */0);
          }));
    c.bind("left", (function (param) {
            return Curry._1(send, /* Previous */3);
          }));
    c.bind("right", (function (param) {
            return Curry._1(send, /* Next */2);
          }));
    return /* () */0;
  };
  var detachShortcuts = function (param) {
    var c = getCombokeys(/* () */0);
    c.detach();
    combokeys[0] = undefined;
    return /* () */0;
  };
  var disableScrollFn = function (param) {
    ((  document.body.style.overflow = "hidden"   ));
    return /* () */0;
  };
  var enableScrollFn = function (param) {
    ((  document.body.style.overflow = "initial"   ));
    return /* () */0;
  };
  var callOnChange = function (param, items, onChange) {
    var match = param[/* state */1][/* pointer */2];
    if (onChange !== undefined && match !== undefined) {
      var pointer = Caml_option.valFromOption(match);
      return Curry._1(onChange, /* record */[
                  /* pointer */pointer,
                  /* items */items,
                  /* index */indexFromPointer(items, pointer)
                ]);
    } else {
      return /* () */0;
    }
  };
  var make$1 = function (items, renderSlide, onChange, render, $staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, _children) {
    var hideNavigationTimeout = $staropt$star !== undefined ? $staropt$star : 2000;
    var backgroundColor = $staropt$star$1 !== undefined ? $staropt$star$1 : "rgba(255,255,255,1)";
    var disableScroll = $staropt$star$2 !== undefined ? $staropt$star$2 : true;
    var zIndex = $staropt$star$3 !== undefined ? $staropt$star$3 : 1000;
    var renderNavigation = function (param) {
      var send = param[/* send */3];
      var state = param[/* state */1];
      var disabledFill = "rgba(0,0,0,0.25)";
      var getFill = function (fn) {
        var match = state[/* pointer */2];
        if (match !== undefined) {
          var match$1 = Curry._2(fn, Caml_option.valFromOption(match), items);
          if (match$1) {
            return disabledFill;
          } else {
            return "rgba(0,0,0,0.8)";
          }
        } else {
          return disabledFill;
        }
      };
      var arrow = function (fn, rotate) {
        return React.createElement("svg", {
                    height: "64",
                    width: "64",
                    fill: getFill(fn),
                    transform: "rotate(" + (String(rotate) + ")"),
                    version: "1",
                    viewBox: "0 0 129 129",
                    xmlns: "http://www.w3.org/2000/svg"
                  }, React.createElement("path", {
                        d: "M40 121l-3 1c-1 1-2 0-2-1-2-1-2-4 0-6l51-50-51-51a4 4 0 0 1 5-6l54 54c2 1 2 4 0 5l-54 54z"
                      }));
      };
      var match = state[/* showNavigation */1];
      return ReasonReact.element(undefined, undefined, Curry._5(Motion$ReasonSlider.New[/* TransitionMotion */1][/* make */0], undefined, (function (param) {
                        return Js_dict.fromList(/* :: */[
                                    /* tuple */[
                                      "progress",
                                      0
                                    ],
                                    /* [] */0
                                  ]);
                      }), (function (param) {
                        return Js_null_undefined.fromOption(Caml_option.some(Js_dict.fromList(/* :: */[
                                            /* tuple */[
                                              "progress",
                                              ReactMotion.spring(0)
                                            ],
                                            /* [] */0
                                          ])));
                      }), match ? /* array */[{
                          style: Js_dict.fromList(/* :: */[
                                /* tuple */[
                                  "progress",
                                  ReactMotion.spring(1, {
                                        stiffness: 300,
                                        damping: 20,
                                        precision: 0.1
                                      })
                                ],
                                /* [] */0
                              ]),
                          key: "arrows",
                          data: Js_null_undefined.fromOption(undefined)
                        }] : /* array */[], (function (i) {
                        if (i.length !== 0) {
                          precisionRound(Caml_array.caml_array_get(i, 0).style["progress"], 3);
                          var match = state[/* pointer */2];
                          var match$1 = state[/* pointer */2];
                          return React.createElement("div", undefined, React.createElement("div", {
                                          style: {
                                            display: "flex",
                                            height: " 100%",
                                            position: "absolute",
                                            right: "0",
                                            top: "0",
                                            width: "10%",
                                            zIndex: String(zIndex + 1 | 0),
                                            alignItems: "center",
                                            justifyContent: "center"
                                          },
                                          disabled: match !== undefined ? isPointerLastEntry(Caml_option.valFromOption(match), items) : true,
                                          onClick: (function (param) {
                                              return Curry._1(send, /* Next */2);
                                            })
                                        }, arrow(isPointerLastEntry, 0)), React.createElement("div", {
                                          style: {
                                            display: "flex",
                                            height: " 100%",
                                            left: "0",
                                            position: "absolute",
                                            top: " 0",
                                            width: "10%",
                                            zIndex: String(zIndex + 1 | 0),
                                            alignItems: "center",
                                            justifyContent: "center"
                                          },
                                          disabled: match$1 !== undefined ? isPointerFirstEntry(Caml_option.valFromOption(match$1), items) : true,
                                          onClick: (function (param) {
                                              return Curry._1(send, /* Previous */3);
                                            })
                                        }, arrow(isPointerFirstEntry, 180)));
                        } else {
                          return null;
                        }
                      })));
    };
    return /* record */[
            /* debugName */component[/* debugName */0],
            /* reactClassInternal */component[/* reactClassInternal */1],
            /* handedOffState */component[/* handedOffState */2],
            /* willReceiveProps */component[/* willReceiveProps */3],
            /* didMount */(function (self) {
                window.addEventListener("optimizedResize", (function (param) {
                        return onResizeHandle(self, param);
                      }));
                return Curry._1(self[/* onUnmount */4], (function (param) {
                              window.removeEventListener("optimizedResize", (function (param) {
                                      return onResizeHandle(self, param);
                                    }));
                              return /* () */0;
                            }));
              }),
            /* didUpdate */component[/* didUpdate */5],
            /* willUnmount */component[/* willUnmount */6],
            /* willUpdate */component[/* willUpdate */7],
            /* shouldUpdate */component[/* shouldUpdate */8],
            /* render */(function (self) {
                var send = self[/* send */3];
                var state = self[/* state */1];
                var closeFn = function (param) {
                  return Curry._1(send, /* Close */0);
                };
                var match = state[/* isOpen */0];
                return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Curry._5(Motion$ReasonSlider.New[/* TransitionMotion */1][/* make */0], undefined, (function (param) {
                                      return Js_dict.fromList(/* :: */[
                                                  /* tuple */[
                                                    "progress",
                                                    0
                                                  ],
                                                  /* [] */0
                                                ]);
                                    }), (function (param) {
                                      return Js_null_undefined.fromOption(Caml_option.some(Js_dict.fromList(/* :: */[
                                                          /* tuple */[
                                                            "progress",
                                                            ReactMotion.spring(0)
                                                          ],
                                                          /* [] */0
                                                        ])));
                                    }), match ? /* array */[{
                                        style: Js_dict.fromList(/* :: */[
                                              /* tuple */[
                                                "progress",
                                                ReactMotion.spring(1)
                                              ],
                                              /* [] */0
                                            ]),
                                        key: "slider",
                                        data: Js_null_undefined.fromOption(undefined)
                                      }] : /* array */[], (function (i) {
                                      if (i.length !== 0) {
                                        var progress = precisionRound(Caml_array.caml_array_get(i, 0).style["progress"], 3);
                                        var match = progress <= 0.95;
                                        var match$1 = progress >= 0.8;
                                        var tmp;
                                        if (match$1) {
                                          var match$2 = state[/* pointer */2];
                                          var tmp$1;
                                          if (match$2 !== undefined) {
                                            try {
                                              tmp$1 = Curry._1(renderSlide, /* record */[
                                                    /* progress */progress,
                                                    /* item */Curry._2(M[/* getItem */0], Caml_option.valFromOption(match$2), items),
                                                    /* close */closeFn
                                                  ]);
                                            }
                                            catch (exn){
                                              Curry._1(send, /* Close */0);
                                              tmp$1 = null;
                                            }
                                          } else {
                                            tmp$1 = null;
                                          }
                                          tmp = React.createElement("div", {
                                                onClick: (function (e) {
                                                    e.stopPropagation();
                                                    if (!isDesktop(/* () */0) && !state[/* showNavigation */1]) {
                                                      return Curry._1(send, /* ShowNavigationAndAutoHide */5);
                                                    } else {
                                                      return 0;
                                                    }
                                                  })
                                              }, renderNavigation(self), tmp$1);
                                        } else {
                                          tmp = null;
                                        }
                                        return ReasonReact.element(undefined, undefined, make(/* array */[React.createElement("div", {
                                                              style: {
                                                                backgroundColor: backgroundColor,
                                                                height: "100%",
                                                                left: "0",
                                                                position: "fixed",
                                                                top: "0",
                                                                width: "100%",
                                                                zIndex: String(zIndex),
                                                                opacity: progress.toString(),
                                                                pointerEvents: match ? "none" : "auto"
                                                              },
                                                              onClick: (function (param) {
                                                                  return Curry._1(send, /* Close */0);
                                                                })
                                                            }, tmp)]));
                                      } else {
                                        return null;
                                      }
                                    }))), Curry._1(render, /* record */[
                                /* show */(function (p) {
                                    return Curry._1(send, /* Show */[p]);
                                  }),
                                /* close */closeFn
                              ]));
              }),
            /* initialState */(function (param) {
                return /* record */[
                        /* isOpen */false,
                        /* showNavigation */isDesktop(/* () */0),
                        /* pointer */undefined
                      ];
              }),
            /* retainedProps */component[/* retainedProps */11],
            /* reducer */(function (action, state) {
                if (typeof action === "number") {
                  switch (action) {
                    case 0 : 
                        return /* UpdateWithSideEffects */Block.__(2, [
                                  /* record */[
                                    /* isOpen */false,
                                    /* showNavigation */state[/* showNavigation */1],
                                    /* pointer */undefined
                                  ],
                                  (function (param) {
                                      if (disableScroll) {
                                        enableScrollFn(/* () */0);
                                      }
                                      return detachShortcuts(/* () */0);
                                    })
                                ]);
                    case 1 : 
                        return /* Update */Block.__(0, [state]);
                    case 2 : 
                        var match = !state[/* isOpen */0];
                        if (match) {
                          return /* NoUpdate */0;
                        } else {
                          var match$1 = state[/* pointer */2];
                          if (match$1 !== undefined) {
                            var pointer = Caml_option.valFromOption(match$1);
                            var nextIndex = indexFromPointer(items, pointer) + 1 | 0;
                            var match$2 = nextIndex >= List.length(items);
                            if (match$2) {
                              return /* NoUpdate */0;
                            } else {
                              return /* UpdateWithSideEffects */Block.__(2, [
                                        /* record */[
                                          /* isOpen */state[/* isOpen */0],
                                          /* showNavigation */state[/* showNavigation */1],
                                          /* pointer */Caml_option.some(nextPointer(pointer, items))
                                        ],
                                        (function (self) {
                                            return callOnChange(self, items, onChange);
                                          })
                                      ]);
                            }
                          } else {
                            return /* NoUpdate */0;
                          }
                        }
                    case 3 : 
                        var match$3 = !state[/* isOpen */0];
                        if (match$3) {
                          return /* NoUpdate */0;
                        } else {
                          var match$4 = state[/* pointer */2];
                          if (match$4 !== undefined) {
                            var pointer$1 = Caml_option.valFromOption(match$4);
                            var prevIndex = indexFromPointer(items, pointer$1) - 1 | 0;
                            var match$5 = prevIndex < 0;
                            if (match$5) {
                              return /* NoUpdate */0;
                            } else {
                              return /* UpdateWithSideEffects */Block.__(2, [
                                        /* record */[
                                          /* isOpen */state[/* isOpen */0],
                                          /* showNavigation */state[/* showNavigation */1],
                                          /* pointer */Caml_option.some(previousPointer(pointer$1, items))
                                        ],
                                        (function (self) {
                                            return callOnChange(self, items, onChange);
                                          })
                                      ]);
                            }
                          } else {
                            return /* NoUpdate */0;
                          }
                        }
                    case 4 : 
                        return /* Update */Block.__(0, [/* record */[
                                    /* isOpen */state[/* isOpen */0],
                                    /* showNavigation */true,
                                    /* pointer */state[/* pointer */2]
                                  ]]);
                    case 5 : 
                        return /* UpdateWithSideEffects */Block.__(2, [
                                  /* record */[
                                    /* isOpen */state[/* isOpen */0],
                                    /* showNavigation */true,
                                    /* pointer */state[/* pointer */2]
                                  ],
                                  (function (param) {
                                      var send = param[/* send */3];
                                      setTimeout((function (param) {
                                              return Curry._1(send, /* HideNavigation */6);
                                            }), hideNavigationTimeout);
                                      return /* () */0;
                                    })
                                ]);
                    case 6 : 
                        return /* Update */Block.__(0, [/* record */[
                                    /* isOpen */state[/* isOpen */0],
                                    /* showNavigation */false,
                                    /* pointer */state[/* pointer */2]
                                  ]]);
                    
                  }
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* isOpen */true,
                              /* showNavigation */state[/* showNavigation */1],
                              /* pointer */Caml_option.some(action[0])
                            ],
                            (function (self) {
                                bindShortcuts(self);
                                if (disableScroll) {
                                  disableScrollFn(/* () */0);
                                }
                                callOnChange(self, items, onChange);
                                return /* () */0;
                              })
                          ]);
                }
              }),
            /* jsElementWrapped */component[/* jsElementWrapped */13]
          ];
  };
  var Component = /* module */[
    /* maybeExecute */maybeExecute,
    /* maybeBool */maybeBool,
    /* indexFromPointer */indexFromPointer,
    /* pointerFromIndex */pointerFromIndex,
    /* nextPointer */nextPointer,
    /* previousPointer */previousPointer,
    /* isPointerFirstEntry */isPointerFirstEntry,
    /* isPointerLastEntry */isPointerLastEntry,
    /* isDesktop */isDesktop,
    /* Portal */Portal,
    /* component */component,
    /* onResizeHandle */onResizeHandle,
    /* renderPropsToJs */renderPropsToJs,
    /* renderPropsFromJs */renderPropsFromJs,
    /* RenderSlideProps */RenderSlideProps,
    /* OnChange */OnChange,
    /* combokeys */combokeys,
    /* getCombokeys */getCombokeys,
    /* bindShortcuts */bindShortcuts,
    /* detachShortcuts */detachShortcuts,
    /* disableScrollFn */disableScrollFn,
    /* enableScrollFn */enableScrollFn,
    /* callOnChange */callOnChange,
    /* make */make$1
  ];
  return /* module */[
          /* Calculations */Calculations,
          /* Component */Component
        ];
}

exports.Default = Default;
exports.Make = Make;
/*  Not a pure module */
